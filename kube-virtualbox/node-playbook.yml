---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

#  Disable Swap
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

 # Installing Kubelet Kubeadm and Kubectl

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Delete content
    file:
      state: absent
      path: /etc/containerd/config.toml

  - name: Restart service containerd, in all cases
    service:
      name: containerd
      state: restarted

  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh

  - name: run kube-proxy command in background
    become: false
    delegate_to: localhost
    shell: kubectl -n kubernetes-dashboard create token admin-user
    run_once: true
    when: inventory_hostname == "node-2"

  - name: Secret token to to-be copy
    become: false
    delegate_to: localhost
    shell: kubectl -n kubernetes-dashboard create token admin-user
    when: inventory_hostname == "node-2"
    register: secret_output

  - debug:
      var: secret_output.stdout

  - name: run kube-proxy command in background
    become: false
    delegate_to: localhost
    shell: nohup kubectl proxy --address='0.0.0.0' --port=8001 --accept-hosts='.*' --kubeconfig=/home/raja/.kube/config --v=2   >/tmp/proxy_host 2>&1 &
    run_once: true
    when: inventory_hostname == "node-2"

 
  - name: run kube-proxy command in background
    become: false
    delegate_to: localhost
    shell: nohup xdg-open "http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/ingress?namespace=default" </dev/null  >/dev/null 2>&1 &
    run_once: true
    when: inventory_hostname == "node-2"

  handlers:
    - name: docker status
      service: name=docker state=started